{"version":3,"sources":["pieces/helpers.ts","pieces/bishop/bishop.ts","pieces/knight/knight.ts","pieces/rook/rook.ts","pieces/king/king.ts","board/helpers.ts","board/StringBoard.tsx","board/CanvasBoard.tsx","App.tsx","index.tsx"],"names":["md5","require","MD5","SHA256","SHA512","bitPairs","input","binaryArray","hexStringToBinary","bitPairsInOrderOfProcessing","i","length","bytePart1","bytePart2","bitPair1","substring","bitPair2","bitPair3","bitPair4","bitTriplets","byteAndAHalf","concat","bitTriplet1","bitTriplet2","bitTriplet3","bitTriplet4","hash","algorithm","shaObj","jsSHA","encoding","update","getHash","hex","split","map","hexChar","parseInt","toString","padStart","hex2bin","bishopWalk","boardHeight","boardWidth","startY","Math","floor","startX","path","x","y","forEach","bitPair","oldY","oldX","push","bishopMove","verticalBit","charAt","horizontalBit","newY","newX","knightWalk","bitTripletsToProcess","bitTriplet","inversionBit","verticalChange","horizontalChange","rookWalk","rookMove","directionBit","movementValue","kingWalk","bitTripletsInOrderOfProcessing","moveLike","createBoardFromPaths","height","width","paths","tempBoard","Array","fill","pathLength","currentStep","convertStepOriginFromBottomLeftToTopLeft","step","boardCharacters","StringBoard","useState","boardState","setBoardState","useEffect","paddingRow","join","content","row","cell","flat","style","fontSize","CanvasBoard","CANVAS_WIDTH","CANVAS_HEIGHT","canvasRef","useRef","savedRef","current","context","getContext","squareSide","widthOffset","heightOffset","clearCanvas","paintBorders","paintCanvas","clearRect","fillStyle","fillRect","beginPath","borderLength","BORDER_WIDTH","board","lowestValue","highestValue","currentValue","findLowestAndHighestvalueOnBoard","hue","random","lightnessStep","lightnessValue","ref","onClick","image","toDataURL","newWindow","window","open","document","write","saveAsImage","BISHOP_ALGORITHM","ROOK_ALGORITHM","KNIGHT_ALGORITHM","KING_ALGORITHM","App","setBoardHeight","setBoardWidth","setInput","setAlgorithm","hashingAlgoritm","sethashingAlgorithm","walkFunction","setWalkFunction","stringBoardProps","setStringBoardProps","walkResult","className","value","onChange","event","target","type","min","Number","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b0445000.chunk.js","sourcesContent":["import jsSHA from \"jssha\";\r\nlet md5 = require('blueimp-md5')\r\n\r\nexport const MD5 = \"MD5\"\r\nexport const SHA256 = \"SHA-256\"\r\nexport const SHA512 = \"SHA-512\"\r\n\r\nexport type HashingAlgorithm = typeof MD5 | typeof SHA256 | typeof SHA512\r\n\r\nexport function bitPairs(input: string): string[] {\r\n  const binaryArray = hexStringToBinary(input)\r\n\r\n  let bitPairsInOrderOfProcessing: string[] = []\r\n\r\n  for (let i = 0; (i + 1) < binaryArray.length; i = i + 2) {\r\n    // \"Bit pairs are processed bytewise from left to right and least significant bit first\"\r\n    // See page 7 here: http://www.dirk-loss.de/sshvis/drunken_bishop.pdf\r\n    const bytePart1 = binaryArray[i]\r\n    const bytePart2 = binaryArray[i + 1]\r\n\r\n    const bitPair1 = bytePart1.substring(0, 2)\r\n    const bitPair2 = bytePart1.substring(2, 4)\r\n    const bitPair3 = bytePart2.substring(0, 2)\r\n    const bitPair4 = bytePart2.substring(2, 4)\r\n\r\n    bitPairsInOrderOfProcessing = [\r\n      ...bitPairsInOrderOfProcessing,\r\n      bitPair4,\r\n      bitPair3,\r\n      bitPair2,\r\n      bitPair1\r\n    ]\r\n  }\r\n\r\n  return bitPairsInOrderOfProcessing\r\n}\r\n\r\nexport function bitTriplets(input: string): string[] {\r\n  const binaryArray = hexStringToBinary(input)\r\n\r\n  let bitTriplets: string[] = []\r\n\r\n  // (i + 2) < binaryArray.length will aggressively discard any incomplete sequence of 4 triplets\r\n  // This could potentially throw away 11 bits, so this should probably check for any complete triplets left\r\n  // and try to extract those.\r\n  for (let i = 0; (i + 2) < binaryArray.length; i = i + 3) {\r\n    // Since we want triplets, the closets number divisible by 3 is 12\r\n    // So we have to take 3 characters at a time\r\n    // Then we follow the same logic as the orignal algorithm\r\n    // So bit triplets are processed \"byte\"-wise from left to right,\r\n    // and least significant bit first\r\n    const byteAndAHalf = binaryArray[i].concat(binaryArray[i + 1], binaryArray[i + 2])\r\n\r\n    const bitTriplet1 = byteAndAHalf.substring(0, 3)\r\n    const bitTriplet2 = byteAndAHalf.substring(3, 6)\r\n    const bitTriplet3 = byteAndAHalf.substring(6, 9)\r\n    const bitTriplet4 = byteAndAHalf.substring(9, 12)\r\n\r\n    bitTriplets = [\r\n      ...bitTriplets,\r\n      bitTriplet1,\r\n      bitTriplet2,\r\n      bitTriplet3,\r\n      bitTriplet4,\r\n    ]\r\n  }\r\n\r\n  return bitTriplets\r\n}\r\n\r\nexport function hash(input: string, algorithm: HashingAlgorithm): string {\r\n  let hash = \"\"\r\n  if (algorithm === MD5) {\r\n    hash = md5(input)\r\n  } else {\r\n    const shaObj = new jsSHA(algorithm, \"TEXT\", { encoding: \"UTF8\" })\r\n    shaObj.update(input)\r\n    hash = shaObj.getHash(\"HEX\");\r\n  }\r\n\r\n  return hash;\r\n}\r\n\r\nfunction hexStringToBinary(hex: string): string[] {\r\n  return hex.split('').map(hexChar => hex2bin(hexChar))\r\n}\r\n\r\nfunction hex2bin(hex: string): string {\r\n  return (parseInt(hex, 16).toString(2)).padStart(4, '0');\r\n}","import { bitPairs } from '../helpers'\r\nimport { Path, Step, WalkParams } from '../types'\r\n\r\nconst UP = '0'\r\nconst DOWN = '1'\r\nconst LEFT = '0'\r\nconst RIGHT = '1'\r\n\r\nexport function bishopWalk({ boardHeight, boardWidth, input }: WalkParams): Path {\r\n  const startY = Math.floor(boardHeight / 2)\r\n  const startX = Math.floor(boardWidth / 2)\r\n\r\n  const bitPairsInOrderOfProcessing = bitPairs(input)\r\n  let path = [{ x: startX, y: startY }]\r\n\r\n  bitPairsInOrderOfProcessing.forEach(bitPair => {\r\n    let oldY = path[path.length - 1].y\r\n    let oldX = path[path.length - 1].x\r\n\r\n    path.push(bishopMove(oldX, oldY, boardHeight, boardWidth, bitPair))\r\n  })\r\n\r\n  return path\r\n}\r\n\r\nexport function bishopMove(oldX: number, oldY: number, boardHeight: number, boardWidth: number, bitPair: string): Step {\r\n  const verticalBit = bitPair.charAt(0)\r\n  const horizontalBit = bitPair.charAt(1)\r\n\r\n  let newY = oldY\r\n  let newX = oldX\r\n\r\n  if (verticalBit === UP) {\r\n    newY = oldY + 1 < boardHeight ? oldY + 1 : oldY\r\n  } else if (verticalBit === DOWN) {\r\n    newY = oldY - 1 >= 0 ? oldY - 1 : oldY\r\n  }\r\n\r\n  if (horizontalBit === LEFT) {\r\n    newX = oldX - 1 >= 0 ? oldX - 1 : oldX\r\n  } else if (horizontalBit === RIGHT) {\r\n    newX = oldX + 1 < boardWidth ? oldX + 1 : oldX\r\n  }\r\n\r\n  return { x: newX, y: newY }\r\n}","import { bitTriplets } from \"../helpers\";\r\nimport { Path, WalkParams } from \"../types\";\r\n\r\nconst NORMAL = '0'\r\nconst FLIPPED = '1'\r\nconst UP = '0'\r\nconst DOWN = '1'\r\nconst LEFT = '0'\r\nconst RIGHT = '1'\r\n\r\nexport function knightWalk({ boardHeight, boardWidth, input }: WalkParams): Path {\r\n  const startY = Math.floor(boardHeight / 2)\r\n  const startX = Math.floor(boardWidth / 2)\r\n\r\n  const bitTripletsToProcess = [...bitTriplets(input),]\r\n\r\n  let path = [{ x: startX, y: startY }]\r\n\r\n  bitTripletsToProcess.forEach(bitTriplet => {\r\n    let newY = path[path.length - 1].y\r\n    let newX = path[path.length - 1].x\r\n\r\n    const inversionBit = bitTriplet.charAt(0)\r\n    const verticalBit = bitTriplet.charAt(1)\r\n    const verticalChange = inversionBit === NORMAL ? 2 : 1\r\n    const horizontalBit = bitTriplet.charAt(2)\r\n    const horizontalChange = inversionBit === NORMAL ? 1 : 2\r\n\r\n    if (verticalBit === UP) {\r\n      newY = newY + verticalChange < boardHeight ? newY + verticalChange : newY\r\n    } else if (verticalBit === DOWN) {\r\n      newY = newY - verticalChange >= 0 ? newY - verticalChange : newY\r\n    }\r\n\r\n    if (horizontalBit === LEFT) {\r\n      newX = newX - horizontalChange >= 0 ? newX - horizontalChange : newX\r\n    } else if (horizontalBit === RIGHT) {\r\n      newX = newX + horizontalChange < boardWidth ? newX + horizontalChange : newX\r\n    }\r\n\r\n    path.push({ x: newX, y: newY })\r\n  })\r\n\r\n  return path\r\n}","import { bitPairs } from \"../helpers\";\r\nimport { Path, Step, WalkParams } from \"../types\";\r\n\r\nconst VERTICAL = '0'\r\nconst HORIZONTAL = '1'\r\nconst NEGATIVE = '0'\r\nconst POSITIVE = '1'\r\n\r\nexport function rookWalk({ boardHeight, boardWidth, input }: WalkParams): Path {\r\n  const startY = Math.floor(boardHeight / 2)\r\n  const startX = Math.floor(boardWidth / 2)\r\n\r\n  const bitPairsInOrderOfProcessing = bitPairs(input)\r\n  let path = [{ x: startX, y: startY }]\r\n\r\n  bitPairsInOrderOfProcessing.forEach(bitPair => {\r\n    let oldY = path[path.length - 1].y\r\n    let oldX = path[path.length - 1].x\r\n\r\n    path.push(rookMove(oldX, oldY, boardHeight, boardWidth, bitPair))\r\n  })\r\n\r\n  return path\r\n}\r\n\r\nexport function rookMove(oldX: number, oldY: number, boardHeight: number, boardWidth: number, bitPair: string): Step {\r\n  const directionBit = bitPair.charAt(0)\r\n  const valueBit = bitPair.charAt(1)\r\n  const movementValue = valueBit === POSITIVE ? 1 : -1\r\n\r\n  let newY = oldY\r\n  let newX = oldX\r\n\r\n  if (directionBit === VERTICAL) {\r\n    newY = oldY + movementValue < boardHeight && oldY + movementValue >= 0 ? oldY + movementValue : oldY\r\n  }\r\n\r\n  if (directionBit === HORIZONTAL) {\r\n    newX = oldX + movementValue < boardWidth && oldX + movementValue >= 0 ? oldX + movementValue : oldX\r\n  }\r\n\r\n  return { x: newX, y: newY }\r\n}","import { bishopMove } from \"../bishop/bishop\";\r\nimport { bitTriplets } from \"../helpers\";\r\nimport { rookMove } from \"../rook/rook\";\r\nimport { Path, WalkParams } from \"../types\";\r\n\r\nconst ROOK = '0'\r\nconst BISHOP = '1'\r\n\r\nexport function kingWalk({ boardHeight, boardWidth, input }: WalkParams): Path {\r\n  const startY = Math.floor(boardHeight / 2)\r\n  const startX = Math.floor(boardWidth / 2)\r\n\r\n  const bitTripletsInOrderOfProcessing = bitTriplets(input)\r\n  let path = [{ x: startX, y: startY }]\r\n\r\n  bitTripletsInOrderOfProcessing.forEach(bitTriplet => {\r\n    let oldY = path[path.length - 1].y\r\n    let oldX = path[path.length - 1].x\r\n\r\n    const moveLike = bitTriplet.charAt(0)\r\n    const bitPair = bitTriplet.substring(1, 3)\r\n\r\n    if (moveLike === ROOK) {\r\n      path.push(rookMove(oldX, oldY, boardHeight, boardWidth, bitPair))\r\n    } else if (moveLike === BISHOP) {\r\n      path.push(bishopMove(oldX, oldY, boardHeight, boardWidth, bitPair))\r\n    }\r\n  })\r\n\r\n  return path\r\n}","import { Path, Step } from \"../pieces/types\";\r\n\r\nexport function createBoardFromPaths(height: number, width: number, paths: Path[]): number[][] {\r\n  const tempBoard: number[][] = Array(height)\r\n    .fill(null)\r\n    .map(() => Array(width).fill(0));\r\n  const pathLength = paths[0].length;\r\n\r\n  for (let i = 0; i < pathLength; i++) {\r\n    paths.forEach((path) => {\r\n      const currentStep = convertStepOriginFromBottomLeftToTopLeft(\r\n        path[i],\r\n        height,\r\n        width\r\n      );\r\n      if (i === 0) {\r\n        tempBoard[currentStep.y][currentStep.x] = 15;\r\n      }\r\n      if (i === pathLength - 1) {\r\n        tempBoard[currentStep.y][currentStep.x] = 16;\r\n      }\r\n\r\n      tempBoard[currentStep.y][currentStep.x] =\r\n        tempBoard[currentStep.y][currentStep.x] < 15 // Do not overwrite special start/end characters\r\n          ? tempBoard[currentStep.y][currentStep.x] + 1\r\n          : tempBoard[currentStep.y][currentStep.x];\r\n    });\r\n  }\r\n\r\n  return tempBoard\r\n}\r\n\r\nexport function findLowestAndHighestvalueOnBoard(board: number[][]): {lowestValue: number, highestValue: number} {\r\n  let lowestValue: number = -1;\r\n  let highestValue: number = -1;\r\n  for (let y = 0; y < board.length; y++) {\r\n    for (let x = 0; x < board[y].length; x++) {\r\n      const currentValue = board[y][x];\r\n      if (\r\n        currentValue !== 0 &&\r\n        currentValue !== 15 &&\r\n        currentValue !== 16\r\n      ) {\r\n        if (lowestValue === -1 || currentValue < lowestValue) {\r\n          lowestValue = currentValue;\r\n        }\r\n\r\n        if (highestValue === -1 || currentValue > highestValue) {\r\n          highestValue = currentValue;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return {lowestValue, highestValue}\r\n}\r\n\r\nexport function convertPathOriginFromBottomLeftToTopLeft(path: Path, height: number, width: number): Path {\r\n  return path.map(step => convertStepOriginFromBottomLeftToTopLeft(step, height, width))\r\n}\r\n\r\nexport function convertStepOriginFromBottomLeftToTopLeft(step: Step, height: number, width: number): Step {\r\n  return { x: step.x, y: height - step.y - 1 }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Path } from \"../pieces/types\";\r\nimport { createBoardFromPaths } from \"./helpers\";\r\n\r\nexport interface BoardProps {\r\n  height: number;\r\n  width: number;\r\n  paths: Path[];\r\n}\r\n\r\nconst boardCharacters = [\r\n  \" \",\r\n  \".\",\r\n  \"o\",\r\n  \"+\",\r\n  \"=\",\r\n  \"*\",\r\n  \"B\",\r\n  \"0\",\r\n  \"X\",\r\n  \"@\",\r\n  \"%\",\r\n  \"&\",\r\n  \"#\",\r\n  \"/\",\r\n  \"^\",\r\n  \"S\",\r\n  \"E\",\r\n];\r\n\r\nexport const StringBoard: React.FC<BoardProps> = ({ height, width, paths }) => {\r\n  const [boardState, setBoardState] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (height > 0 && width > 0) {\r\n      const tempBoard = createBoardFromPaths(height, width, paths)\r\n\r\n      const paddingRow = [\"+\", ...Array(width).fill(\"-\"), \"+\\n\"].join(\"\");\r\n      const content = tempBoard\r\n        .map((row) => [\"|\", ...row.map((cell) => boardCharacters[cell]), \"|\\n\"])\r\n        .flat()\r\n        .join(\"\");\r\n\r\n      setBoardState(paddingRow.concat(content, paddingRow));\r\n    }\r\n  }, [paths, height, width]);\r\n\r\n  return (\r\n    <div style={{ fontSize: \"20px\" }}>\r\n      <pre>{boardState}</pre>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport {\r\n  createBoardFromPaths,\r\n  findLowestAndHighestvalueOnBoard,\r\n} from \"./helpers\";\r\nimport { BoardProps } from \"./StringBoard\";\r\n\r\nexport function CanvasBoard({ height, width, paths }: BoardProps) {\r\n  const BORDER_WIDTH = 5;\r\n  const CANVAS_WIDTH = 500;\r\n  const CANVAS_HEIGHT = 500;\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  const saveAsImage = () => {\r\n    if (canvasRef && canvasRef.current) {\r\n      const image = canvasRef.current.toDataURL(\"image/png\");\r\n      const newWindow = window.open();\r\n      newWindow?.document.write(`<img src=${image} />`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (height > 0 && width > 0) {\r\n      const savedRef = canvasRef.current;\r\n      const context = savedRef?.getContext(\"2d\");\r\n\r\n      if (savedRef && context) {\r\n        const tempBoard = createBoardFromPaths(height, width, paths);\r\n\r\n        const squareSide =\r\n          height > width\r\n            ? (CANVAS_HEIGHT - BORDER_WIDTH * 2) / height\r\n            : (CANVAS_WIDTH - BORDER_WIDTH * 2) / width;\r\n        const widthOffset = (CANVAS_WIDTH - squareSide * width) / 2;\r\n        const heightOffset = (CANVAS_HEIGHT - squareSide * height) / 2;\r\n\r\n        clearCanvas(context);\r\n        paintBorders(context, heightOffset, widthOffset);\r\n        paintCanvas(context, tempBoard, squareSide, widthOffset, heightOffset);\r\n      }\r\n    }\r\n  }, [height, width, paths]);\r\n\r\n  const clearCanvas = (context: CanvasRenderingContext2D) => {\r\n    context.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    context.fillStyle = \"rgba(255,255,255,0)\";\r\n    context.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    context.beginPath();\r\n  };\r\n\r\n  const paintBorders = (\r\n    context: CanvasRenderingContext2D,\r\n    heightOffset: number,\r\n    widthOffset: number\r\n  ) => {\r\n    // Paint borders\r\n    context.fillStyle = \"rgb(0,0,0)\";\r\n    if (heightOffset > 0) {\r\n      const borderLength = CANVAS_WIDTH - widthOffset * 2 + BORDER_WIDTH * 2;\r\n      // Top\r\n      context.fillRect(\r\n        widthOffset - BORDER_WIDTH,\r\n        heightOffset - BORDER_WIDTH,\r\n        borderLength,\r\n        BORDER_WIDTH\r\n      );\r\n      // Bottom\r\n      context.fillRect(\r\n        widthOffset - BORDER_WIDTH,\r\n        CANVAS_HEIGHT - heightOffset,\r\n        borderLength,\r\n        BORDER_WIDTH\r\n      );\r\n    }\r\n\r\n    if (widthOffset > 0) {\r\n      const borderLength = CANVAS_HEIGHT - heightOffset * 2 + BORDER_WIDTH * 2;\r\n      // Left\r\n      context.fillRect(\r\n        widthOffset - BORDER_WIDTH,\r\n        heightOffset - BORDER_WIDTH,\r\n        BORDER_WIDTH,\r\n        borderLength\r\n      );\r\n      // Right\r\n      context.fillRect(\r\n        CANVAS_WIDTH - widthOffset,\r\n        heightOffset - BORDER_WIDTH,\r\n        BORDER_WIDTH,\r\n        borderLength\r\n      );\r\n    }\r\n  };\r\n\r\n  const paintCanvas = (\r\n    context: CanvasRenderingContext2D,\r\n    tempBoard: number[][],\r\n    squareSide: number,\r\n    widthOffset: number,\r\n    heightOffset: number\r\n  ) => {\r\n    const { highestValue } = findLowestAndHighestvalueOnBoard(tempBoard);\r\n    const hue = Math.random() * 360;\r\n    const lightnessStep = (80 - 20) / highestValue;\r\n\r\n    // Create white background\r\n    context.fillStyle = \"rgb(255,255,255)\";\r\n    context.fillRect(\r\n      widthOffset,\r\n      heightOffset,\r\n      CANVAS_WIDTH - widthOffset * 2,\r\n      CANVAS_HEIGHT - heightOffset * 2\r\n    );\r\n\r\n    for (let y = 0; y < tempBoard.length; y++) {\r\n      for (let x = 0; x < tempBoard[y].length; x++) {\r\n        if (tempBoard[y][x] !== 0) {\r\n          const lightnessValue = 80 - lightnessStep * tempBoard[y][x];\r\n          //context.fillStyle = `hsl(149, 50%, ${lightnessValue}%)`;\r\n          context.fillStyle = `hsl(${hue}, 50%, ${lightnessValue}%)`;\r\n\r\n          if (tempBoard[y][x] === 15) {\r\n            context.fillStyle = `hsl(${hue}, 50%, 80%)`;\r\n          }\r\n\r\n          if (tempBoard[y][x] === 16) {\r\n            context.fillStyle = `hsl(${hue}, 50%, 10%)`;\r\n          }\r\n\r\n          context.fillRect(\r\n            widthOffset + x * squareSide,\r\n            heightOffset + y * squareSide,\r\n            squareSide,\r\n            squareSide\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={CANVAS_WIDTH}\r\n        height={CANVAS_HEIGHT}\r\n      ></canvas>\r\n      <div>\r\n        <button onClick={() => saveAsImage()}>Save image</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { bishopWalk } from \"./pieces/bishop/bishop\";\r\nimport { knightWalk } from \"./pieces/knight/knight\";\r\nimport { rookWalk } from \"./pieces/rook/rook\";\r\nimport { kingWalk } from \"./pieces/king/king\";\r\nimport { hash, HashingAlgorithm } from './pieces/helpers'\r\nimport { BoardProps, StringBoard } from \"./board/StringBoard\";\r\nimport { WalkFunction } from \"./pieces/types\";\r\nimport { CanvasBoard } from \"./board/CanvasBoard\";\r\nimport { MD5, SHA256, SHA512 } from \"./pieces/helpers\";\r\n\r\nconst BISHOP_ALGORITHM = \"bishop\";\r\nconst ROOK_ALGORITHM = \"rook\";\r\nconst KNIGHT_ALGORITHM = \"knight\";\r\nconst KING_ALGORITHM = \"king\";\r\n\r\nfunction App() {\r\n  const [boardHeight, setBoardHeight] = useState(9);\r\n  const [boardWidth, setBoardWidth] = useState(17);\r\n  const [input, setInput] = useState(\"kitscon\");\r\n  const [algorithm, setAlgorithm] = useState(BISHOP_ALGORITHM);\r\n  const [hashingAlgoritm, sethashingAlgorithm] = useState<HashingAlgorithm>(MD5)\r\n\r\n  const [walkFunction, setWalkFunction] = useState<WalkFunction>(\r\n    () => bishopWalk\r\n  );\r\n  const [stringBoardProps, setStringBoardProps] = useState<BoardProps>({\r\n    height: boardHeight,\r\n    width: boardWidth,\r\n    paths: [[]],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (algorithm === BISHOP_ALGORITHM) {\r\n      setWalkFunction(() => bishopWalk);\r\n    } else if (algorithm === ROOK_ALGORITHM) {\r\n      setWalkFunction(() => rookWalk);\r\n    } else if (algorithm === KNIGHT_ALGORITHM) {\r\n      setWalkFunction(() => knightWalk);\r\n    } else if (algorithm === KING_ALGORITHM) {\r\n      setWalkFunction(() => kingWalk);\r\n    }\r\n  }, [algorithm]);\r\n\r\n  useEffect(() => {\r\n    const walkResult = walkFunction({ boardHeight, boardWidth, input: hash(input, hashingAlgoritm) });\r\n    setStringBoardProps({\r\n      height: boardHeight,\r\n      width: boardWidth,\r\n      paths: [walkResult],\r\n    });\r\n  }, [boardHeight, boardWidth, input, hashingAlgoritm, walkFunction]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <label>Input to be hashed</label>\r\n        <input\r\n          value={input}\r\n          onChange={(event) => setInput(event.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label>Select walk algorithm</label>\r\n        <select\r\n          value={algorithm}\r\n          onChange={(event) => setAlgorithm(event.target.value)}\r\n        >\r\n          <option value={BISHOP_ALGORITHM}>Bishop</option>\r\n          <option value={KNIGHT_ALGORITHM}>Knight</option>\r\n          <option value={ROOK_ALGORITHM}>Rook</option>\r\n          <option value={KING_ALGORITHM}>King</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label>Select hashing algorithm</label>\r\n        <select\r\n          value={hashingAlgoritm}\r\n          onChange={(event) => sethashingAlgorithm(event.target.value as HashingAlgorithm)}\r\n          >\r\n          <option value={MD5}>{MD5}</option>\r\n          <option value={SHA256}>{SHA256}</option>\r\n          <option value={SHA512}>{SHA512}</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label>Height</label>\r\n        <input\r\n          type=\"number\"\r\n          value={boardHeight}\r\n          min={1}\r\n          onChange={(event) => setBoardHeight(Number(event.target.value))}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label>Width</label>\r\n        <input\r\n          type=\"number\"\r\n          value={boardWidth}\r\n          min={1}\r\n          onChange={(event) => setBoardWidth(Number(event.target.value))}\r\n        />\r\n      </div>\r\n\r\n      <StringBoard {...stringBoardProps} />\r\n      <CanvasBoard {...stringBoardProps} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}