{"version":3,"sources":["pieces/helpers.ts","pieces/bishop/bishop.ts","pieces/knight/knight.ts","pieces/rook/rook.ts","pieces/king/king.ts","board/helpers.ts","board/StringBoard/StringBoard.tsx","board/CanvasBoard/CanvasBoard.tsx","App.tsx","index.tsx"],"names":["md5","require","MD5","SHA256","SHA512","bitPairs","input","binaryArray","hexStringToBinary","bitPairsInOrderOfProcessing","i","length","bytePart1","bytePart2","bitPair1","substring","bitPair2","bitPair3","bitPair4","bitTriplets","byteAndAHalf","concat","bitTriplet1","bitTriplet2","bitTriplet3","bitTriplet4","hash","algorithm","shaObj","jsSHA","encoding","update","getHash","hex","split","map","hexChar","parseInt","toString","padStart","hex2bin","bishopWalk","boardHeight","boardWidth","startY","Math","floor","startX","path","x","y","forEach","bitPair","oldY","oldX","push","bishopMove","verticalBit","charAt","horizontalBit","newY","newX","knightWalk","bitTripletsToProcess","bitTriplet","inversionBit","verticalChange","horizontalChange","rookWalk","rookMove","directionBit","movementValue","kingWalk","bitTripletsInOrderOfProcessing","moveLike","createBoardFromPaths","height","width","paths","tempBoard","Array","fill","pathLength","currentStep","convertStepOriginFromBottomLeftToTopLeft","step","boardCharacters","StringBoard","useState","boardState","setBoardState","useEffect","paddingRow","join","content","row","cell","flat","style","fontSize","marginBottom","LINES","SQUARES","CanvasBoard","visualisationAlgorithm","CANVAS_WIDTH","CANVAS_HEIGHT","canvasRef","useRef","every","emptyPaths","savedRef","current","context","getContext","squareSide","widthOffset","heightOffset","clearCanvas","paintBorders","paintSquares","edges","index","self","undefined","newEdge","start","end","timesTaken","existingEdgeIndex","findIndex","edge","oldEdge","findAllEdges","convertPathOriginFromBottomLeftToTopLeft","starts","ends","paintLines","clearRect","fillStyle","fillRect","beginPath","borderLength","BORDER_WIDTH","board","lowestValue","highestValue","currentValue","findLowestAndHighestvalueOnBoard","hue","random","lightnessStep","lightnessValue","distanceFromLeft","distanceFromTop","lineStartX","lineStartY","lineEndX","lineEndY","lineWidth","moveTo","lineTo","stroke","squareCenterX","squareCenterY","arc","PI","side","ref","onClick","image","toDataURL","newWindow","window","open","document","write","saveAsImage","BISHOP_ALGORITHM","ROOK_ALGORITHM","KNIGHT_ALGORITHM","KING_ALGORITHM","App","setBoardHeight","setBoardWidth","setInput","setAlgorithm","hashingAlgoritm","sethashingAlgorithm","setVisualisationAlgorithm","walkFunction","setWalkFunction","stringBoardProps","setStringBoardProps","canvasBoardProps","setCanvasBoardProps","walkResult","className","href","value","onChange","event","target","marginRight","type","min","Number","marginLeft","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fcf92153.chunk.js","sourcesContent":["import jsSHA from \"jssha\";\r\nlet md5 = require('blueimp-md5')\r\n\r\nexport const MD5 = \"MD5\"\r\nexport const SHA256 = \"SHA-256\"\r\nexport const SHA512 = \"SHA-512\"\r\n\r\nexport type HashingAlgorithm = typeof MD5 | typeof SHA256 | typeof SHA512\r\n\r\nexport function bitPairs(input: string): string[] {\r\n  const binaryArray = hexStringToBinary(input)\r\n\r\n  let bitPairsInOrderOfProcessing: string[] = []\r\n\r\n  for (let i = 0; (i + 1) < binaryArray.length; i = i + 2) {\r\n    // \"Bit pairs are processed bytewise from left to right and least significant bit first\"\r\n    // See page 7 here: http://www.dirk-loss.de/sshvis/drunken_bishop.pdf\r\n    const bytePart1 = binaryArray[i]\r\n    const bytePart2 = binaryArray[i + 1]\r\n\r\n    const bitPair1 = bytePart1.substring(0, 2)\r\n    const bitPair2 = bytePart1.substring(2, 4)\r\n    const bitPair3 = bytePart2.substring(0, 2)\r\n    const bitPair4 = bytePart2.substring(2, 4)\r\n\r\n    bitPairsInOrderOfProcessing = [\r\n      ...bitPairsInOrderOfProcessing,\r\n      bitPair4,\r\n      bitPair3,\r\n      bitPair2,\r\n      bitPair1\r\n    ]\r\n  }\r\n\r\n  return bitPairsInOrderOfProcessing\r\n}\r\n\r\nexport function bitTriplets(input: string): string[] {\r\n  const binaryArray = hexStringToBinary(input)\r\n\r\n  let bitTriplets: string[] = []\r\n\r\n  // (i + 2) < binaryArray.length will aggressively discard any incomplete sequence of 4 triplets\r\n  // This could potentially throw away 11 bits, so this should probably check for any complete triplets left\r\n  // and try to extract those.\r\n  for (let i = 0; (i + 2) < binaryArray.length; i = i + 3) {\r\n    // Since we want triplets, the closets number divisible by 3 is 12\r\n    // So we have to take 3 characters at a time\r\n    // Then we follow the same logic as the orignal algorithm\r\n    // So bit triplets are processed \"byte\"-wise from left to right,\r\n    // and least significant bit first\r\n    const byteAndAHalf = binaryArray[i].concat(binaryArray[i + 1], binaryArray[i + 2])\r\n\r\n    const bitTriplet1 = byteAndAHalf.substring(0, 3)\r\n    const bitTriplet2 = byteAndAHalf.substring(3, 6)\r\n    const bitTriplet3 = byteAndAHalf.substring(6, 9)\r\n    const bitTriplet4 = byteAndAHalf.substring(9, 12)\r\n\r\n    bitTriplets = [\r\n      ...bitTriplets,\r\n      bitTriplet1,\r\n      bitTriplet2,\r\n      bitTriplet3,\r\n      bitTriplet4,\r\n    ]\r\n  }\r\n\r\n  return bitTriplets\r\n}\r\n\r\nexport function hash(input: string, algorithm: HashingAlgorithm): string {\r\n  let hash = \"\"\r\n  if (algorithm === MD5) {\r\n    hash = md5(input)\r\n  } else {\r\n    const shaObj = new jsSHA(algorithm, \"TEXT\", { encoding: \"UTF8\" })\r\n    shaObj.update(input)\r\n    hash = shaObj.getHash(\"HEX\");\r\n  }\r\n\r\n  return hash;\r\n}\r\n\r\nfunction hexStringToBinary(hex: string): string[] {\r\n  return hex.split('').map(hexChar => hex2bin(hexChar))\r\n}\r\n\r\nfunction hex2bin(hex: string): string {\r\n  return (parseInt(hex, 16).toString(2)).padStart(4, '0');\r\n}","import { bitPairs } from '../helpers'\r\nimport { Path, Step, WalkParams } from '../types'\r\n\r\nconst UP = '0'\r\nconst DOWN = '1'\r\nconst LEFT = '0'\r\nconst RIGHT = '1'\r\n\r\nexport function bishopWalk({ boardHeight, boardWidth, input }: WalkParams): Path {\r\n  const startY = Math.floor(boardHeight / 2)\r\n  const startX = Math.floor(boardWidth / 2)\r\n\r\n  const bitPairsInOrderOfProcessing = bitPairs(input)\r\n  let path = [{ x: startX, y: startY }]\r\n\r\n  bitPairsInOrderOfProcessing.forEach(bitPair => {\r\n    let oldY = path[path.length - 1].y\r\n    let oldX = path[path.length - 1].x\r\n\r\n    path.push(bishopMove(oldX, oldY, boardHeight, boardWidth, bitPair))\r\n  })\r\n\r\n  return path\r\n}\r\n\r\nexport function bishopMove(oldX: number, oldY: number, boardHeight: number, boardWidth: number, bitPair: string): Step {\r\n  const verticalBit = bitPair.charAt(0)\r\n  const horizontalBit = bitPair.charAt(1)\r\n\r\n  let newY = oldY\r\n  let newX = oldX\r\n\r\n  if (verticalBit === UP) {\r\n    newY = oldY + 1 < boardHeight ? oldY + 1 : oldY\r\n  } else if (verticalBit === DOWN) {\r\n    newY = oldY - 1 >= 0 ? oldY - 1 : oldY\r\n  }\r\n\r\n  if (horizontalBit === LEFT) {\r\n    newX = oldX - 1 >= 0 ? oldX - 1 : oldX\r\n  } else if (horizontalBit === RIGHT) {\r\n    newX = oldX + 1 < boardWidth ? oldX + 1 : oldX\r\n  }\r\n\r\n  return { x: newX, y: newY }\r\n}","import { bitTriplets } from \"../helpers\";\r\nimport { Path, WalkParams } from \"../types\";\r\n\r\nconst NORMAL = '0'\r\nconst FLIPPED = '1'\r\nconst UP = '0'\r\nconst DOWN = '1'\r\nconst LEFT = '0'\r\nconst RIGHT = '1'\r\n\r\nexport function knightWalk({ boardHeight, boardWidth, input }: WalkParams): Path {\r\n  const startY = Math.floor(boardHeight / 2)\r\n  const startX = Math.floor(boardWidth / 2)\r\n\r\n  const bitTripletsToProcess = [...bitTriplets(input),]\r\n\r\n  let path = [{ x: startX, y: startY }]\r\n\r\n  bitTripletsToProcess.forEach(bitTriplet => {\r\n    let newY = path[path.length - 1].y\r\n    let newX = path[path.length - 1].x\r\n\r\n    const inversionBit = bitTriplet.charAt(0)\r\n    const verticalBit = bitTriplet.charAt(1)\r\n    const verticalChange = inversionBit === NORMAL ? 2 : 1\r\n    const horizontalBit = bitTriplet.charAt(2)\r\n    const horizontalChange = inversionBit === NORMAL ? 1 : 2\r\n\r\n    if (verticalBit === UP) {\r\n      newY = newY + verticalChange < boardHeight ? newY + verticalChange : newY\r\n    } else if (verticalBit === DOWN) {\r\n      newY = newY - verticalChange >= 0 ? newY - verticalChange : newY\r\n    }\r\n\r\n    if (horizontalBit === LEFT) {\r\n      newX = newX - horizontalChange >= 0 ? newX - horizontalChange : newX\r\n    } else if (horizontalBit === RIGHT) {\r\n      newX = newX + horizontalChange < boardWidth ? newX + horizontalChange : newX\r\n    }\r\n\r\n    path.push({ x: newX, y: newY })\r\n  })\r\n\r\n  return path\r\n}","import { bitPairs } from \"../helpers\";\r\nimport { Path, Step, WalkParams } from \"../types\";\r\n\r\nconst VERTICAL = '0'\r\nconst HORIZONTAL = '1'\r\nconst NEGATIVE = '0'\r\nconst POSITIVE = '1'\r\n\r\nexport function rookWalk({ boardHeight, boardWidth, input }: WalkParams): Path {\r\n  const startY = Math.floor(boardHeight / 2)\r\n  const startX = Math.floor(boardWidth / 2)\r\n\r\n  const bitPairsInOrderOfProcessing = bitPairs(input)\r\n  let path = [{ x: startX, y: startY }]\r\n\r\n  bitPairsInOrderOfProcessing.forEach(bitPair => {\r\n    let oldY = path[path.length - 1].y\r\n    let oldX = path[path.length - 1].x\r\n\r\n    path.push(rookMove(oldX, oldY, boardHeight, boardWidth, bitPair))\r\n  })\r\n\r\n  return path\r\n}\r\n\r\nexport function rookMove(oldX: number, oldY: number, boardHeight: number, boardWidth: number, bitPair: string): Step {\r\n  const directionBit = bitPair.charAt(0)\r\n  const valueBit = bitPair.charAt(1)\r\n  const movementValue = valueBit === POSITIVE ? 1 : -1\r\n\r\n  let newY = oldY\r\n  let newX = oldX\r\n\r\n  if (directionBit === VERTICAL) {\r\n    newY = oldY + movementValue < boardHeight && oldY + movementValue >= 0 ? oldY + movementValue : oldY\r\n  }\r\n\r\n  if (directionBit === HORIZONTAL) {\r\n    newX = oldX + movementValue < boardWidth && oldX + movementValue >= 0 ? oldX + movementValue : oldX\r\n  }\r\n\r\n  return { x: newX, y: newY }\r\n}","import { bishopMove } from \"../bishop/bishop\";\r\nimport { bitTriplets } from \"../helpers\";\r\nimport { rookMove } from \"../rook/rook\";\r\nimport { Path, WalkParams } from \"../types\";\r\n\r\nconst ROOK = '0'\r\nconst BISHOP = '1'\r\n\r\nexport function kingWalk({ boardHeight, boardWidth, input }: WalkParams): Path {\r\n  const startY = Math.floor(boardHeight / 2)\r\n  const startX = Math.floor(boardWidth / 2)\r\n\r\n  const bitTripletsInOrderOfProcessing = bitTriplets(input)\r\n  let path = [{ x: startX, y: startY }]\r\n\r\n  bitTripletsInOrderOfProcessing.forEach(bitTriplet => {\r\n    let oldY = path[path.length - 1].y\r\n    let oldX = path[path.length - 1].x\r\n\r\n    const moveLike = bitTriplet.charAt(0)\r\n    const bitPair = bitTriplet.substring(1, 3)\r\n\r\n    if (moveLike === ROOK) {\r\n      path.push(rookMove(oldX, oldY, boardHeight, boardWidth, bitPair))\r\n    } else if (moveLike === BISHOP) {\r\n      path.push(bishopMove(oldX, oldY, boardHeight, boardWidth, bitPair))\r\n    }\r\n  })\r\n\r\n  return path\r\n}","import { Path, Step } from \"../pieces/types\";\r\n\r\nexport interface PathEdge {\r\n  start: Step,\r\n  end: Step,\r\n  timesTaken: number\r\n}\r\n\r\nexport function createBoardFromPaths(height: number, width: number, paths: Path[]): number[][] {\r\n  const tempBoard: number[][] = Array(height)\r\n    .fill(null)\r\n    .map(() => Array(width).fill(0));\r\n  const pathLength = paths[0].length;\r\n\r\n  for (let i = 0; i < pathLength; i++) {\r\n    paths.forEach((path) => {\r\n      const currentStep = convertStepOriginFromBottomLeftToTopLeft(\r\n        path[i],\r\n        height,\r\n        width\r\n      );\r\n      if (i === 0) {\r\n        tempBoard[currentStep.y][currentStep.x] = 15;\r\n      }\r\n      if (i === pathLength - 1) {\r\n        tempBoard[currentStep.y][currentStep.x] = 16;\r\n      }\r\n\r\n      tempBoard[currentStep.y][currentStep.x] =\r\n        tempBoard[currentStep.y][currentStep.x] < 15 // Do not overwrite special start/end characters\r\n          ? tempBoard[currentStep.y][currentStep.x] + 1\r\n          : tempBoard[currentStep.y][currentStep.x];\r\n    });\r\n  }\r\n\r\n  return tempBoard\r\n}\r\n\r\nexport function findLowestAndHighestvalueOnBoard(board: number[][]): { lowestValue: number, highestValue: number } {\r\n  let lowestValue: number = -1;\r\n  let highestValue: number = -1;\r\n  for (let y = 0; y < board.length; y++) {\r\n    for (let x = 0; x < board[y].length; x++) {\r\n      const currentValue = board[y][x];\r\n      if (\r\n        currentValue !== 0 &&\r\n        currentValue !== 15 &&\r\n        currentValue !== 16\r\n      ) {\r\n        if (lowestValue === -1 || currentValue < lowestValue) {\r\n          lowestValue = currentValue;\r\n        }\r\n\r\n        if (highestValue === -1 || currentValue > highestValue) {\r\n          highestValue = currentValue;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return { lowestValue, highestValue }\r\n}\r\n\r\nexport function findAllEdges(paths: Path[]): PathEdge[] {\r\n  const edges: PathEdge[] = []\r\n  paths.forEach(path => {\r\n    path.forEach((step, index, self) => {\r\n      if (self[index + 1] !== undefined) {\r\n        const newEdge: PathEdge = { start: step, end: self[index + 1], timesTaken: 1 }\r\n\r\n        let existingEdgeIndex = edges.findIndex(edge =>\r\n          edge.start.x === newEdge.start.x &&\r\n          edge.start.y === newEdge.start.y &&\r\n          edge.end.x === newEdge.end.x &&\r\n          edge.end.y === newEdge.end.y\r\n        )\r\n\r\n        if (existingEdgeIndex > -1) {\r\n          // Edge exists, increase count\r\n          const oldEdge = edges[existingEdgeIndex]\r\n          edges[existingEdgeIndex] = { ...oldEdge, timesTaken: oldEdge.timesTaken + 1 }\r\n        } else {\r\n          edges.push(newEdge)\r\n        }\r\n      }\r\n    })\r\n  })\r\n\r\n  return edges\r\n}\r\n\r\nexport function convertPathOriginFromBottomLeftToTopLeft(path: Path, height: number, width: number): Path {\r\n  return path.map(step => convertStepOriginFromBottomLeftToTopLeft(step, height, width))\r\n}\r\n\r\nexport function convertStepOriginFromBottomLeftToTopLeft(step: Step, height: number, width: number): Step {\r\n  return { x: step.x, y: height - step.y - 1 }\r\n}\r\n\r\nexport function emptyPaths(paths: Path[]) {\r\n  return paths.every(path => path.length === 0)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Path } from \"../../pieces/types\";\r\nimport { createBoardFromPaths } from \"../helpers\";\r\n\r\nexport interface BoardProps {\r\n  height: number;\r\n  width: number;\r\n  paths: Path[];\r\n}\r\n\r\nconst boardCharacters = [\r\n  \" \",\r\n  \".\",\r\n  \"o\",\r\n  \"+\",\r\n  \"=\",\r\n  \"*\",\r\n  \"B\",\r\n  \"0\",\r\n  \"X\",\r\n  \"@\",\r\n  \"%\",\r\n  \"&\",\r\n  \"#\",\r\n  \"/\",\r\n  \"^\",\r\n  \"S\",\r\n  \"E\",\r\n];\r\n\r\nexport const StringBoard: React.FC<BoardProps> = ({ height, width, paths }) => {\r\n  const [boardState, setBoardState] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (height > 0 && width > 0) {\r\n      const tempBoard = createBoardFromPaths(height, width, paths);\r\n\r\n      const paddingRow = [\"+\", ...Array(width).fill(\"-\"), \"+\\n\"].join(\"\");\r\n      const content = tempBoard\r\n        .map((row) => [\"|\", ...row.map((cell) => boardCharacters[cell]), \"|\\n\"])\r\n        .flat()\r\n        .join(\"\");\r\n\r\n      setBoardState(paddingRow.concat(content, paddingRow));\r\n    }\r\n  }, [paths, height, width]);\r\n\r\n  return (\r\n    <div>\r\n      <pre style={{ fontSize: \"20px\", marginBottom: \"0\" }}>{boardState}</pre>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { Step } from \"../../pieces/types\";\r\nimport {\r\n  convertPathOriginFromBottomLeftToTopLeft,\r\n  convertStepOriginFromBottomLeftToTopLeft,\r\n  createBoardFromPaths,\r\n  emptyPaths,\r\n  findAllEdges,\r\n  findLowestAndHighestvalueOnBoard,\r\n  PathEdge,\r\n} from \"../helpers\";\r\nimport { BoardProps } from \"../StringBoard/StringBoard\";\r\n\r\nexport const LINES = \"Lines\";\r\nexport const SQUARES = \"Squares\";\r\nexport type VisualisationType = typeof LINES | typeof SQUARES;\r\nexport interface CanvasBoardProps extends BoardProps {\r\n  visualisationAlgorithm: VisualisationType;\r\n}\r\n\r\nexport function CanvasBoard({\r\n  height,\r\n  width,\r\n  paths,\r\n  visualisationAlgorithm,\r\n}: CanvasBoardProps) {\r\n  const BORDER_WIDTH = 5;\r\n  const CANVAS_WIDTH = 500;\r\n  const CANVAS_HEIGHT = 500;\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  const saveAsImage = () => {\r\n    if (canvasRef && canvasRef.current) {\r\n      const image = canvasRef.current.toDataURL(\"image/png\");\r\n      const newWindow = window.open();\r\n      newWindow?.document.write(`<img src=${image} />`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (height > 0 && width > 0 && !emptyPaths(paths)) {\r\n      const savedRef = canvasRef.current;\r\n      const context = savedRef?.getContext(\"2d\");\r\n\r\n      if (savedRef && context) {\r\n        const squareSide =\r\n          height > width\r\n            ? (CANVAS_HEIGHT - BORDER_WIDTH * 2) / height\r\n            : (CANVAS_WIDTH - BORDER_WIDTH * 2) / width;\r\n        const widthOffset = (CANVAS_WIDTH - squareSide * width) / 2;\r\n        const heightOffset = (CANVAS_HEIGHT - squareSide * height) / 2;\r\n\r\n        clearCanvas(context);\r\n        paintBorders(context, heightOffset, widthOffset);\r\n\r\n        if (visualisationAlgorithm === SQUARES) {\r\n          const tempBoard = createBoardFromPaths(height, width, paths);\r\n          paintSquares(\r\n            context,\r\n            tempBoard,\r\n            squareSide,\r\n            widthOffset,\r\n            heightOffset\r\n          );\r\n        } else if (visualisationAlgorithm === LINES) {\r\n          const edges = findAllEdges(\r\n            paths.map((path) =>\r\n              convertPathOriginFromBottomLeftToTopLeft(path, height, width)\r\n            )\r\n          );\r\n          const starts = paths.map((path) =>\r\n            convertStepOriginFromBottomLeftToTopLeft(path[0], height, width)\r\n          );\r\n          const ends = paths.map((path) =>\r\n            convertStepOriginFromBottomLeftToTopLeft(\r\n              path[path.length - 1],\r\n              height,\r\n              width\r\n            )\r\n          );\r\n\r\n          paintLines(\r\n            context,\r\n            edges,\r\n            starts,\r\n            ends,\r\n            squareSide,\r\n            widthOffset,\r\n            heightOffset\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }, [height, width, paths, visualisationAlgorithm]);\r\n\r\n  const clearCanvas = (context: CanvasRenderingContext2D) => {\r\n    context.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    context.fillStyle = \"rgba(255,255,255,0)\";\r\n    context.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    context.beginPath();\r\n  };\r\n\r\n  const paintBorders = (\r\n    context: CanvasRenderingContext2D,\r\n    heightOffset: number,\r\n    widthOffset: number\r\n  ) => {\r\n    // Paint borders\r\n    context.fillStyle = \"rgb(0,0,0)\";\r\n    if (heightOffset > 0) {\r\n      const borderLength = CANVAS_WIDTH - widthOffset * 2 + BORDER_WIDTH * 2;\r\n      // Top\r\n      context.fillRect(\r\n        widthOffset - BORDER_WIDTH,\r\n        heightOffset - BORDER_WIDTH,\r\n        borderLength,\r\n        BORDER_WIDTH\r\n      );\r\n      // Bottom\r\n      context.fillRect(\r\n        widthOffset - BORDER_WIDTH,\r\n        CANVAS_HEIGHT - heightOffset,\r\n        borderLength,\r\n        BORDER_WIDTH\r\n      );\r\n    }\r\n\r\n    if (widthOffset > 0) {\r\n      const borderLength = CANVAS_HEIGHT - heightOffset * 2 + BORDER_WIDTH * 2;\r\n      // Left\r\n      context.fillRect(\r\n        widthOffset - BORDER_WIDTH,\r\n        heightOffset - BORDER_WIDTH,\r\n        BORDER_WIDTH,\r\n        borderLength\r\n      );\r\n      // Right\r\n      context.fillRect(\r\n        CANVAS_WIDTH - widthOffset,\r\n        heightOffset - BORDER_WIDTH,\r\n        BORDER_WIDTH,\r\n        borderLength\r\n      );\r\n    }\r\n  };\r\n\r\n  const paintSquares = (\r\n    context: CanvasRenderingContext2D,\r\n    tempBoard: number[][],\r\n    squareSide: number,\r\n    widthOffset: number,\r\n    heightOffset: number\r\n  ) => {\r\n    const { highestValue } = findLowestAndHighestvalueOnBoard(tempBoard);\r\n    const hue = Math.random() * 360;\r\n    const lightnessStep = (80 - 20) / highestValue;\r\n\r\n    // Create white background\r\n    context.fillStyle = \"rgb(255,255,255)\";\r\n    context.fillRect(\r\n      widthOffset,\r\n      heightOffset,\r\n      CANVAS_WIDTH - widthOffset * 2,\r\n      CANVAS_HEIGHT - heightOffset * 2\r\n    );\r\n\r\n    for (let y = 0; y < tempBoard.length; y++) {\r\n      for (let x = 0; x < tempBoard[y].length; x++) {\r\n        if (tempBoard[y][x] !== 0) {\r\n          const lightnessValue = 80 - lightnessStep * tempBoard[y][x];\r\n          //context.fillStyle = `hsl(149, 50%, ${lightnessValue}%)`;\r\n          context.fillStyle = `hsl(${hue}, 50%, ${lightnessValue}%)`;\r\n\r\n          if (tempBoard[y][x] === 15) {\r\n            context.fillStyle = `hsl(${hue}, 50%, 80%)`;\r\n          }\r\n\r\n          if (tempBoard[y][x] === 16) {\r\n            context.fillStyle = `hsl(${hue}, 50%, 10%)`;\r\n          }\r\n\r\n          context.fillRect(\r\n            widthOffset + x * squareSide,\r\n            heightOffset + y * squareSide,\r\n            squareSide,\r\n            squareSide\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const paintLines = (\r\n    context: CanvasRenderingContext2D,\r\n    edges: PathEdge[],\r\n    starts: Step[],\r\n    ends: Step[],\r\n    squareSide: number,\r\n    widthOffset: number,\r\n    heightOffset: number\r\n  ) => {\r\n    // Create white background\r\n    context.fillStyle = \"rgb(255,255,255)\";\r\n    context.fillRect(\r\n      widthOffset,\r\n      heightOffset,\r\n      CANVAS_WIDTH - widthOffset * 2,\r\n      CANVAS_HEIGHT - heightOffset * 2\r\n    );\r\n\r\n    context.fillStyle = \"rgb(0,0,0)\";\r\n\r\n    const distanceFromLeft = (x: number) => x * squareSide + squareSide / 2;\r\n    const distanceFromTop = (y: number) => y * squareSide + squareSide / 2;\r\n\r\n    edges.forEach((edge) => {\r\n      const lineStartX = widthOffset + distanceFromLeft(edge.start.x);\r\n      const lineStartY = heightOffset + distanceFromTop(edge.start.y);\r\n      const lineEndX = widthOffset + distanceFromLeft(edge.end.x);\r\n      const lineEndY = heightOffset + distanceFromTop(edge.end.y);\r\n\r\n      context.beginPath();\r\n      context.lineWidth = 2;\r\n      context.moveTo(lineStartX, lineStartY);\r\n      context.lineTo(lineEndX, lineEndY);\r\n      context.stroke();\r\n    });\r\n\r\n    starts.forEach((start) => {\r\n      const squareCenterX = widthOffset + distanceFromLeft(start.x);\r\n      const squareCenterY = heightOffset + distanceFromTop(start.y);\r\n\r\n      context.beginPath();\r\n      context.arc(squareCenterX, squareCenterY, squareSide / 4, 0, 2 * Math.PI);\r\n      context.fill();\r\n    });\r\n\r\n    ends.forEach((end) => {\r\n      const squareCenterX = widthOffset + distanceFromLeft(end.x);\r\n      const squareCenterY = heightOffset + distanceFromTop(end.y);\r\n\r\n      const side = squareSide / 2;\r\n      context.beginPath();\r\n      context.fillRect(\r\n        squareCenterX - side / 2,\r\n        squareCenterY - side / 2,\r\n        side,\r\n        side\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={CANVAS_WIDTH}\r\n        height={CANVAS_HEIGHT}\r\n      ></canvas>\r\n      <div>\r\n        <button onClick={() => saveAsImage()}>Save image</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { bishopWalk } from \"./pieces/bishop/bishop\";\r\nimport { knightWalk } from \"./pieces/knight/knight\";\r\nimport { rookWalk } from \"./pieces/rook/rook\";\r\nimport { kingWalk } from \"./pieces/king/king\";\r\nimport { hash, HashingAlgorithm } from \"./pieces/helpers\";\r\nimport { BoardProps, StringBoard } from \"./board/StringBoard/StringBoard\";\r\nimport { WalkFunction } from \"./pieces/types\";\r\nimport {\r\n  CanvasBoard,\r\n  CanvasBoardProps,\r\n  LINES,\r\n  SQUARES,\r\n  VisualisationType,\r\n} from \"./board/CanvasBoard/CanvasBoard\";\r\nimport { MD5, SHA256, SHA512 } from \"./pieces/helpers\";\r\n\r\nconst BISHOP_ALGORITHM = \"bishop\";\r\nconst ROOK_ALGORITHM = \"rook\";\r\nconst KNIGHT_ALGORITHM = \"knight\";\r\nconst KING_ALGORITHM = \"king\";\r\n\r\nfunction App() {\r\n  const [boardHeight, setBoardHeight] = useState(9);\r\n  const [boardWidth, setBoardWidth] = useState(17);\r\n  const [input, setInput] = useState(\"kitscon\");\r\n  const [algorithm, setAlgorithm] = useState(BISHOP_ALGORITHM);\r\n  const [hashingAlgoritm, sethashingAlgorithm] =\r\n    useState<HashingAlgorithm>(MD5);\r\n  const [visualisationAlgorithm, setVisualisationAlgorithm] =\r\n    useState<VisualisationType>(SQUARES);\r\n\r\n  const [walkFunction, setWalkFunction] = useState<WalkFunction>(\r\n    () => bishopWalk\r\n  );\r\n  const [stringBoardProps, setStringBoardProps] = useState<BoardProps>({\r\n    height: boardHeight,\r\n    width: boardWidth,\r\n    paths: [[]],\r\n  });\r\n  const [canvasBoardProps, setCanvasBoardProps] = useState<CanvasBoardProps>({\r\n    height: boardHeight,\r\n    width: boardWidth,\r\n    paths: [[]],\r\n    visualisationAlgorithm: visualisationAlgorithm,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (algorithm === BISHOP_ALGORITHM) {\r\n      setWalkFunction(() => bishopWalk);\r\n    } else if (algorithm === ROOK_ALGORITHM) {\r\n      setWalkFunction(() => rookWalk);\r\n    } else if (algorithm === KNIGHT_ALGORITHM) {\r\n      setWalkFunction(() => knightWalk);\r\n    } else if (algorithm === KING_ALGORITHM) {\r\n      setWalkFunction(() => kingWalk);\r\n    }\r\n  }, [algorithm]);\r\n\r\n  useEffect(() => {\r\n    const walkResult = walkFunction({\r\n      boardHeight,\r\n      boardWidth,\r\n      input: hash(input, hashingAlgoritm),\r\n    });\r\n    setStringBoardProps({\r\n      height: boardHeight,\r\n      width: boardWidth,\r\n      paths: [walkResult],\r\n    });\r\n    setCanvasBoardProps({\r\n      height: boardHeight,\r\n      width: boardWidth,\r\n      paths: [walkResult],\r\n      visualisationAlgorithm: visualisationAlgorithm,\r\n    });\r\n  }, [\r\n    boardHeight,\r\n    boardWidth,\r\n    input,\r\n    hashingAlgoritm,\r\n    visualisationAlgorithm,\r\n    walkFunction,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"big-header\">KitsCon 21.2</h1>\r\n      <p className=\"explainer\">\r\n        On this page you can find an implementation of the{\" \"}\r\n        <a href=\"http://www.dirk-loss.de/sshvis/drunken_bishop.pdf\">\r\n          drunken bishop algorithm\r\n        </a>\r\n        , along with some alternative movesets and visualisations.\r\n      </p>\r\n      <p className=\"explainer\">\r\n        The board starts out at 9 &times; 17 as this is the size used in\r\n        OpenSSH, but the visualisation looks better at smaller sizes, so try out\r\n        something like 5 &times; 5.\r\n      </p>\r\n      <p className=\"explainer\">\r\n        Experiment with different inputs, walk algorithms and visualisations. If\r\n        you see a visualisation you like, you can save it by clicking the button\r\n        under the picture!\r\n      </p>\r\n      <div className=\"input-container\">\r\n        <label className=\"input-label\">Input to be hashed</label>\r\n        <input\r\n          className=\"input-element\"\r\n          value={input}\r\n          onChange={(event) => setInput(event.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <label className=\"input-label\">Select walk algorithm</label>\r\n        <select\r\n          className=\"input-element\"\r\n          value={algorithm}\r\n          onChange={(event) => setAlgorithm(event.target.value)}\r\n        >\r\n          <option value={BISHOP_ALGORITHM}>Bishop</option>\r\n          <option value={KNIGHT_ALGORITHM}>Knight</option>\r\n          <option value={ROOK_ALGORITHM}>Rook</option>\r\n          <option value={KING_ALGORITHM}>King</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <label className=\"input-label\">Select hashing algorithm</label>\r\n        <select\r\n          className=\"input-element\"\r\n          value={hashingAlgoritm}\r\n          onChange={(event) =>\r\n            sethashingAlgorithm(event.target.value as HashingAlgorithm)\r\n          }\r\n        >\r\n          <option value={MD5}>{MD5}</option>\r\n          <option value={SHA256}>{SHA256}</option>\r\n          <option value={SHA512}>{SHA512}</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"input-container split-input-container\">\r\n        <div className=\"split-input-divider\" style={{ marginRight: \"8px\" }}>\r\n          <label className=\"input-label\">Height</label>\r\n          <input\r\n            className=\"input-element\"\r\n            type=\"number\"\r\n            value={boardHeight}\r\n            min={1}\r\n            onChange={(event) => setBoardHeight(Number(event.target.value))}\r\n          />\r\n        </div>\r\n        <div className=\"split-input-divider\" style={{ marginLeft: \"8px\" }}>\r\n          <label className=\"input-label\">Width</label>\r\n          <input\r\n            className=\"input-element\"\r\n            type=\"number\"\r\n            value={boardWidth}\r\n            min={1}\r\n            onChange={(event) => setBoardWidth(Number(event.target.value))}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <label className=\"input-label\">Select visualisation algorithm</label>\r\n        <select\r\n          className=\"input-element\"\r\n          value={visualisationAlgorithm}\r\n          onChange={(event) =>\r\n            setVisualisationAlgorithm(event.target.value as VisualisationType)\r\n          }\r\n        >\r\n          <option value={SQUARES}>{SQUARES}</option>\r\n          <option value={LINES}>{LINES}</option>\r\n        </select>\r\n      </div>\r\n      <CanvasBoard {...canvasBoardProps} />\r\n      <StringBoard {...stringBoardProps} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}